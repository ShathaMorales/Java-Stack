package com.codingdojo.loginregistration.controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;

import com.codingdojo.loginregistration.models.LoginUser;
import com.codingdojo.loginregistration.models.Project;
import com.codingdojo.loginregistration.models.User;
import com.codingdojo.loginregistration.services.ProjectService;
import com.codingdojo.loginregistration.services.UserService;

import jakarta.servlet.http.HttpSession;
import jakarta.validation.Valid;

@Controller
public class HomeController {    
    @Autowired
    private UserService userServ;
    
    @Autowired
    private ProjectService projectService;
    
    @GetMapping("/")
    public String index(Model model) {
        model.addAttribute("newUser", new User());
        model.addAttribute("newLogin", new LoginUser());
        return "index.jsp";
    }
    
    @PostMapping("/register")
    public String register(@Valid @ModelAttribute("newUser") User newUser, 
            BindingResult result, Model model, HttpSession session) {
    	User user = userServ.register(newUser, result);        
        if(result.hasErrors()) {
            model.addAttribute("newLogin", new LoginUser());
            return "index.jsp";
        }
        session.setAttribute("userId", user.getId());
        return "redirect:/dashboard";
    }
    
    @PostMapping("/login")
    public String login(@Valid @ModelAttribute("newLogin") LoginUser newLogin, 
            BindingResult result, Model model, HttpSession session) {
        User user = userServ.login(newLogin, result);
        if(result.hasErrors() || user==null) {
            model.addAttribute("newUser", new User());
            return "index.jsp";
        }
        session.setAttribute("userId", user.getId());
        session.setAttribute("userName", user.getFirstName());
        return "redirect:/dashboard";
    }
	 
	@GetMapping("/logout")
	public String logout(HttpSession session) { 
	        session.invalidate();
	        return "redirect:/";       
	}    	 
    
	@GetMapping("/dashboard")
	public String dashBoard(HttpSession session, Model model) {
		if (session.getAttribute("userId") != null) {
			Long userId = (Long) session.getAttribute("userId");
			User user = userServ.findUserById(userId);
			model.addAttribute("user", user);
			model.addAttribute("unassignedProjects", projectService.getUnassignedProjects(user));
			model.addAttribute("assignedProjects", projectService.getAssignedProjects(user));
			return "dashboard.jsp";
		} else {
			return "redirect:/";
		}		
	}
	
	@GetMapping("/projects/new")
	public String newProject(@ModelAttribute("project") Project project, 
			HttpSession session, Model model) {
		if (session.getAttribute("userId") != null) {
			Long userId = (Long) session.getAttribute("userId");
			model.addAttribute("userId", userId);		
			return "ProjectForm.jsp";
		} else {
			return "redirect:/";
		}	
	}
	
	@PostMapping("/projects/new")
	public String createProject(@Valid @ModelAttribute("project") Project project, 
			BindingResult result, HttpSession session, Model model) {
		if (session.getAttribute("userId") != null) {
			if (result.hasErrors()) {
				return "ProjectForm.jsp";
			}else {
				Long userId = (Long) session.getAttribute("userId");
				User user = userServ.findUserById(userId);
				user.getProjects().add(project);
				projectService.addProject(project);
				return "redirect:/dashboard";
			}
		}
		else {
			return "redirect:/";
		}		
	}
	
}